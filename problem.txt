Problem:  Muitas pessoas usam um robo de zap devagar

Sc - 0
CURRENT UX in ZAP
User: 
Oi 1
Oi 2
Oi 3
Oi 4
BOT:
Echo oi 1 
Echo oi 2 
Echo oi 3 
Echo oi 4 

BETTER UX IN ZAP
User: 
Oi 1
Oi 2
Oi 3
Oi 4
BOT:
Echo: Oi 1
Echo: Oi fulano2
Oi fulano3
Oi fulano4

Sc0 - responder todas as msgm com echo
Sc1 - descartar todas as msgm ate a primeira foi respondida
Sc2 - juntar as msgm todas e tratar eles como um input so

------
Como programar sc1  - pseudocode

Webhook → msg para controller

Msg
number: wa number
content:  text simple string

de onde vem as mensagens???

mode = first | each | all

Controller (msg, context) {

	mode = env.MODE;
	
	recipient = msg.number;
	text = msg.content;

	if (mode === 'each') { // responde todas as mensagens

		sender.sentToZap(recipient, "Resposta: " + text);

	} else if (mode === 'first') {

		lock = getLock(recipient); // obtem o lock para o número do usuário

		// comparar como "string" no caso do Redis
		
		if(lock !== 'true') { // primeira mensagem recebida, caso lock não seja especificamente 'true'
			
			setLock(recipient, 'true'); // trava a resposta de novas mensagens

			Sleep(random(500-30000ms)); // simula uma lentidão na resposta do chatbot

			sender.sentToZap(recipient, text);

			setLock(recipient, 'false'); // libera a resposta de novas mensagens

		}

	} else if (mode === 'all') { // responde todas as mensagens de uma única vez
	
		lock = getLock(recipient); // obtem o lock para o número do usuário

		saveMessage(recipient, text); // salva todas as mensagens recebidas em uma sessão, banco, etc...
		
		if(lock !== 'true') {
			
			setLock(recipient, 'true'); // trava a resposta de novas mensagens

			Sleep(random(500-30000ms)); // simula uma lentidão na resposta do chatbot

			multipleMessages = getMessages(recipient);

			sender.sentToZap(recipient, multipleMessages);

			setLock(recipient, 'false'); // libera a resposta de novas mensagens

			deleteMessages(recipient);

		}

	}

}

saveMessage(number = null) { // salva a mensagem no banco, redis, etc...
	redis.lpush('');
}

//-------------------

slowOperationFunction(param) {
	
}
// result = await slowOperationFunction (param).  // causar um demoro aleatorio (5-30 segundos)




